openapi: 3.0.0
info:
  description: "This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters."
  version: 1.0.2
  title: ROC (Robot Operation Center)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: project
    description: Endpoints related to Project schema
  - name: agent
    description: Endpoints related to Agent schema
  - name: environment
    description: Endpoints related to Environment schema
  - name: task-force
    description: Endpoints related to TaskForce schema
  - name: job
    description: Endpoints related to Job schema

paths:
  # ------------- Project ------------- #
  /project:
    get:
      operationId: getProjects
      summary: List all projects
      tags:
        - project
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    post:
      operationId: createProject
      summary: Create new project
      tags:
        - project
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Request body is invalid
  /project/{projectId}:
    get:
      operationId: getProjectById
      summary: Get Project by Id
      tags:
        - project
      parameters:
        - in: path
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    put:
      operationId: updateProject
      summary: Update Project
      tags:
        - project
      parameters:
        - in: path
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Success
    delete:
      operationId: deleteProject
      summary: Delete Project
      tags:
        - project
      parameters:
        - in: path
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Success
    # ------------- End Project ------------- #
    # ------------- Agent ------------- #
  /agent:
    get:
      operationId: getAgents
      summary: List all agents by project id
      tags:
        - agent
      parameters:
        - in: query
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: project object to be returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
    post:
      operationId: createAgent
      summary: Create new agent
      tags:
        - agent
      parameters:
        - in: query
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Agent'
      responses:
        '200':
          description: Successful operation. Returns an agent object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
  /agent/{agentId}:
    get:
      operationId: getAgentById
      summary: Get agent by id
      tags:
        - agent
      parameters:
        - in: path
          name: agentId
          description: Id of agent
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation. Returns an agent object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
    put:
      operationId: updateAgent
      summary: Update agent
      tags:
        - agent
      parameters:
        - in: path
          name: agentId
          description: Id of agent
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation. Returns an agent object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
    delete:
      operationId: deleteAgent
      summary: Deletes agent
      tags:
        - agent
      parameters:
        - in: path
          name: agentId
          description: Id of agent
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '204':
          description: Successful operation.
  /agent/{agentId}/packages:
    get:
      operationId: getAgentPackages
      summary: Get packages by agent
      tags:
        - agent
      parameters:
        - in: path
          name: agentId
          description: Id of agent
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
    put:
      operationId: installPackages
      summary: Install new package(s)
      tags:
        - agent
      parameters:
        - in: path
          name: agentId
          description: Id of agent
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
  /agent/{agentId}/logs:
    get:
      operationId: getAgentLogs
      summary: Get logs by agent
      tags:
        - agent
      parameters:
        - in: path
          name: agentId
          description: Id of agent
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
  # ------------- End Agent ------------- #

  # ------------- Task Force ------------- #
  /task-force:
    get:
      operationId: getTaskForces
      summary: List Task Forces
      tags:
        - task-force
      parameters:
        - in: query
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
    post:
      operationId: createTaskForce
      summary: Create new task force
      tags:
        - task-force
      parameters:
        - in: query
          name: projectId
          description: Id of project
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
  /task-force/{taskForceId}:
    get:
      operationId: getTaskForceById
      summary: Get Task Force
      tags:
        - task-force
      parameters:
        - in: path
          name: taskForceId
          description: Id of task force
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
    put:
      operationId: editTaskForce
      summary: Edit task force
      tags:
        - task-force
      parameters:
        - in: path
          name: taskForceId
          description: Id of task force
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
    delete:
      operationId: deleteTaskForce
      summary: Deletes a job
      tags:
        - task-force
      parameters:
        - in: path
          name: taskForceId
          description: Id of task force
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
  /task-force/{taskForceId}/action:
    post:
      operationId: triggerTaskForceAction
      summary: Trigger a task force action
      tags:
        - task-force
      parameters:
        - in: path
          name: taskForceId
          description: Id of task force
          required: true
          schema:
            type: string
            items:
              type: integer
      responses:
        '200':
          description: Successful operation.
  # ------------- End Task Force ------------- #

components:
  requestBodies:
    ProjectList:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Project"
      description: List of user object
      required: true
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        git:
          type: string
        size:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
        isDefault:
          type: boolean
    Agent:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        os:
          type: string
        version:
          type: string
        status:
          type: string
        logs:
          type: array
        pythonVersion:
          type: string
        rfVersion:
          type: string
        packages:
          type: array
        isInitialized:
          type: boolean
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string